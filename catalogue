03-Catalogue
Catalogue is a microservice that is responsible for serving the list of items that displays in roboshop application.

Hint
Developer has chosen NodeJs, Check with developer which version of NodeJS is needed. Developer has set a context that it can work with NodeJS >20

Install NodeJS, By default NodeJS 16 is available, We would like to enable 20 version and install list.

Hint
You can list modules by using dnf module list

dnf module disable nodejs -y
dnf module enable nodejs:20 -y

Install NodeJS

dnf install nodejs -y

Configure the application.

info
Our application developed by the developer of our org and it is not having any RPM software just like other softwares. So we need to configure every step manually

Recap
We already discussed in Linux basics section that applications should run as nonroot user.

Add application User

useradd roboshop

info
User roboshop is a function / daemon user to run the application. Apart from that we dont use this user to login to server.

Also, username roboshop has been picked because it more suits to our project name.

info
We keep application in one standard location. This is a usual practice that runs in the organization.

Lets setup an app directory.

mkdir /app 

Download the application code to created app directory.

curl -o /tmp/catalogue.zip https://roboshop-artifacts.s3.amazonaws.com/catalogue-v3.zip 
cd /app 
unzip /tmp/catalogue.zip

Every application is developed by development team will have some common softwares that they use as libraries. This application also have the same way of defined dependencies in the application configuration.

Lets download the dependencies.

cd /app 
npm install 

We need to setup a new service in systemd so systemctl can manage this service

info
We already discussed in linux basics that advantages of systemctl managing services, Hence we are taking that approach. Which is also a standard way in the OS.

Setup SystemD Catalogue Service

/etc/systemd/system/catalogue.service
[Unit]
Description = Catalogue Service

[Service]
User=roboshop
Environment=MONGO=true
Environment=MONGO_URL="mongodb://<MONGODB-SERVER-IPADDRESS>:27017/catalogue"
ExecStart=/bin/node /app/server.js
SyslogIdentifier=catalogue

[Install]
WantedBy=multi-user.target

info
Hint! You can create file by using vim /etc/systemd/system/catalogue.service

Note
Ensure you replace <MONGODB-SERVER-IPADDRESS> with IP address

Load the service.

systemctl daemon-reload

info
This above command is because we added a new service, We are telling systemd to reload so it will detect new service.

Start the service.

systemctl enable catalogue 
systemctl start catalogue

For the application to work fully functional we need to load schema to the Database. Additonally we are going to have master data to be seeded for the applications to work. Here in this case it is list of products we want to sale.

Info
Schemas are usually part of application code and developer will provide them as part of development.

Master data are usually provided by business operations team.

To load schema / master data we need to install mongodb client and then we can load it.

To have mongo client installed we have to setup MongoDB repo and install mongodb-client

/etc/yum.repos.d/mongo.repo
[mongodb-org-7.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/9/mongodb-org/7.0/x86_64/
enabled=1
gpgcheck=0

dnf install mongodb-mongosh -y

Load Master Data of the List of products we want to sell and their quantity information also there in the same master data.

mongosh --host MONGODB-SERVER-IPADDRESS </app/db/master-data.js

Note
You need to update catalogue server ip address in frontend configuration. Configuration file is /etc/nginx/nginx.conf
